var app = (function () {
	'use strict';

	function noop() {}

	function assign(tar, src) {
		for (var k in src) tar[k] = src[k];
		return tar;
	}

	function assignTrue(tar, src) {
		for (var k in src) tar[k] = 1;
		return tar;
	}

	function addLoc(element, file, line, column, char) {
		element.__svelte_meta = {
			loc: { file, line, column, char }
		};
	}

	function run(fn) {
		fn();
	}

	function append(target, node) {
		target.appendChild(node);
	}

	function insert(target, node, anchor) {
		target.insertBefore(node, anchor);
	}

	function detachNode(node) {
		node.parentNode.removeChild(node);
	}

	function createElement(name) {
		return document.createElement(name);
	}

	function createText(data) {
		return document.createTextNode(data);
	}

	function addListener(node, event, handler, options) {
		node.addEventListener(event, handler, options);
	}

	function removeListener(node, event, handler, options) {
		node.removeEventListener(event, handler, options);
	}

	function setAttribute(node, attribute, value) {
		if (value == null) node.removeAttribute(attribute);
		else node.setAttribute(attribute, value);
	}

	function setData(text, data) {
		text.data = '' + data;
	}

	function setStyle(node, key, value) {
		node.style.setProperty(key, value);
	}

	function blankObject() {
		return Object.create(null);
	}

	function destroy(detach) {
		this.destroy = noop;
		this.fire('destroy');
		this.set = noop;

		this._fragment.d(detach !== false);
		this._fragment = null;
		this._state = {};
	}

	function destroyDev(detach) {
		destroy.call(this, detach);
		this.destroy = function() {
			console.warn('Component was already destroyed');
		};
	}

	function _differs(a, b) {
		return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
	}

	function fire(eventName, data) {
		var handlers =
			eventName in this._handlers && this._handlers[eventName].slice();
		if (!handlers) return;

		for (var i = 0; i < handlers.length; i += 1) {
			var handler = handlers[i];

			if (!handler.__calling) {
				try {
					handler.__calling = true;
					handler.call(this, data);
				} finally {
					handler.__calling = false;
				}
			}
		}
	}

	function flush(component) {
		component._lock = true;
		callAll(component._beforecreate);
		callAll(component._oncreate);
		callAll(component._aftercreate);
		component._lock = false;
	}

	function get() {
		return this._state;
	}

	function init(component, options) {
		component._handlers = blankObject();
		component._slots = blankObject();
		component._bind = options._bind;
		component._staged = {};

		component.options = options;
		component.root = options.root || component;
		component.store = options.store || component.root.store;

		if (!options.root) {
			component._beforecreate = [];
			component._oncreate = [];
			component._aftercreate = [];
		}
	}

	function on(eventName, handler) {
		var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
		handlers.push(handler);

		return {
			cancel: function() {
				var index = handlers.indexOf(handler);
				if (~index) handlers.splice(index, 1);
			}
		};
	}

	function set(newState) {
		this._set(assign({}, newState));
		if (this.root._lock) return;
		flush(this.root);
	}

	function _set(newState) {
		var oldState = this._state,
			changed = {},
			dirty = false;

		newState = assign(this._staged, newState);
		this._staged = {};

		for (var key in newState) {
			if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
		}
		if (!dirty) return;

		this._state = assign(assign({}, oldState), newState);
		this._recompute(changed, this._state);
		if (this._bind) this._bind(changed, this._state);

		if (this._fragment) {
			this.fire("state", { changed: changed, current: this._state, previous: oldState });
			this._fragment.p(changed, this._state);
			this.fire("update", { changed: changed, current: this._state, previous: oldState });
		}
	}

	function _stage(newState) {
		assign(this._staged, newState);
	}

	function setDev(newState) {
		if (typeof newState !== 'object') {
			throw new Error(
				this._debugName + '.set was called without an object of data key-values to update.'
			);
		}

		this._checkReadOnly(newState);
		set.call(this, newState);
	}

	function callAll(fns) {
		while (fns && fns.length) fns.shift()();
	}

	function _mount(target, anchor) {
		this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
	}

	var protoDev = {
		destroy: destroyDev,
		get,
		fire,
		on,
		set: setDev,
		_recompute: noop,
		_set,
		_stage,
		_mount,
		_differs
	};

	/* ui\ssr\dynamic.html generated by Svelte v2.16.0 */

	function getPage() {
	    return document.getElementById("dynamic").getAttribute("page");
	}

	function data() {
	    return {
	        id: "",
	        comments: null
	    }
	}
	var methods = {
	    post() {
	        const {id} = this.get();
	        const elname = document.getElementById("name");
	        const elemail = document.getElementById("email");
	        const elcontent = document.getElementById("content");

	        const name = elname.value ? elname.value : null;
	        const email = elemail.value ? elemail.value : null;
	        const content = elcontent.value ? elcontent.value : null;
	        const comment = {
	            "name" : name,
	            "email" : email,
	            "content" : content
	        };
	        fetch("/comment/add", {
	                method: "POST",
	                mode: "same-origin",
	                credentials: "same-origin",
	                headers: {
	                    "Content-Type": "application/json"
	                },
	                redirect: "follow",
	                body: JSON.stringify(comment)
	            }).then(response => {
	                return response.json()
	            })
	            .then(response => {
	                console.log(reponse.body);
	            })
	        .catch(err => console.log(err));


	    }
	};

	function oncreate(){
	    this.set({id: `${getPage()}`});
	    const {id} = this.get();
	    fetch(`/comment/getAllRelToAPage/${id}`)
	        .then(response => {
	                return response.json()
	            })
	        .then(response => {
	            this.set({comments: response});
	        });
	}
	const file = "ui\\ssr\\dynamic.html";

	function create_main_fragment(component, ctx) {
		var div0, text0, text1, div5, div4, form, div1, label0, text3, input0, text4, div2, label1, text6, input1, text7, div3, label2, text9, textarea, text10, input2, current;

		function click_handler(event) {
			component.post();
		}

		return {
			c: function create() {
				div0 = createElement("div");
				text0 = createText(ctx.comments);
				text1 = createText("\r\n    ");
				div5 = createElement("div");
				div4 = createElement("div");
				form = createElement("form");
				div1 = createElement("div");
				label0 = createElement("label");
				label0.textContent = "Email";
				text3 = createText("\r\n                ");
				input0 = createElement("input");
				text4 = createText("\r\n            ");
				div2 = createElement("div");
				label1 = createElement("label");
				label1.textContent = "Name";
				text6 = createText("\r\n                ");
				input1 = createElement("input");
				text7 = createText("\r\n            ");
				div3 = createElement("div");
				label2 = createElement("label");
				label2.textContent = "Content";
				text9 = createText("\r\n                ");
				textarea = createElement("textarea");
				text10 = createText("\r\n            ");
				input2 = createElement("input");
				div0.id = "comments";
				div0.className = "container text-center en border border-primary rounded";
				setStyle(div0, "font-size", "1vw");
				setStyle(div0, "color", "black");
				setStyle(div0, "margin-top", "5%");
				setStyle(div0, "margin-bottom", "5%");
				setStyle(div0, "direction", "rtl");
				setStyle(div0, "padding", "2%");
				addLoc(div0, file, 2, 0, 4);
				label0.htmlFor = "email";
				label0.className = "sr-only";
				addLoc(label0, file, 13, 16, 380);
				setAttribute(input0, "type", "email");
				input0.className = "form-control";
				input0.id = "email";
				input0.placeholder = "email";
				addLoc(input0, file, 14, 16, 446);
				div1.className = "form-group mb-2";
				addLoc(div1, file, 12, 12, 333);
				label1.htmlFor = "name";
				label1.className = "sr-only";
				addLoc(label1, file, 17, 16, 607);
				setAttribute(input1, "type", "text");
				input1.className = "form-control";
				input1.id = "name";
				input1.placeholder = "name";
				addLoc(input1, file, 18, 16, 671);
				div2.className = "form-group mx-sm-3 mb-2";
				addLoc(div2, file, 16, 12, 552);
				label2.htmlFor = "name";
				label2.className = "sr-only";
				addLoc(label2, file, 21, 16, 829);
				textarea.id = "content";
				textarea.className = "form-control";
				textarea.placeholder = "content";
				addLoc(textarea, file, 22, 16, 896);
				div3.className = "form-group mx-sm-3 mb-2";
				addLoc(div3, file, 20, 12, 774);
				addListener(input2, "click", click_handler);
				setAttribute(input2, "type", "button");
				input2.className = "btn btn-primary mb-2";
				input2.value = "post";
				addLoc(input2, file, 24, 12, 1007);
				form.className = "form-inline";
				addLoc(form, file, 11, 8, 293);
				div4.className = "card-body";
				addLoc(div4, file, 10, 4, 260);
				div5.className = "card";
				setStyle(div5, "width", "18rem");
				addLoc(div5, file, 9, 4, 214);
			},

			m: function mount(target, anchor) {
				insert(target, div0, anchor);
				append(div0, text0);
				insert(target, text1, anchor);
				insert(target, div5, anchor);
				append(div5, div4);
				append(div4, form);
				append(form, div1);
				append(div1, label0);
				append(div1, text3);
				append(div1, input0);
				append(form, text4);
				append(form, div2);
				append(div2, label1);
				append(div2, text6);
				append(div2, input1);
				append(form, text7);
				append(form, div3);
				append(div3, label2);
				append(div3, text9);
				append(div3, textarea);
				append(form, text10);
				append(form, input2);
				current = true;
			},

			p: function update(changed, ctx) {
				if (changed.comments) {
					setData(text0, ctx.comments);
				}
			},

			i: function intro(target, anchor) {
				if (current) return;

				this.m(target, anchor);
			},

			o: run,

			d: function destroy$$1(detach) {
				if (detach) {
					detachNode(div0);
					detachNode(text1);
					detachNode(div5);
				}

				removeListener(input2, "click", click_handler);
			}
		};
	}

	function Dynamic(options) {
		this._debugName = '<Dynamic>';
		if (!options || (!options.target && !options.root)) {
			throw new Error("'target' is a required option");
		}

		init(this, options);
		this._state = assign(data(), options.data);
		if (!('comments' in this._state)) console.warn("<Dynamic> was created without expected data property 'comments'");
		this._intro = !!options.intro;

		this._fragment = create_main_fragment(this, this._state);

		this.root._oncreate.push(() => {
			oncreate.call(this);
			this.fire("update", { changed: assignTrue({}, this._state), current: this._state });
		});

		if (options.target) {
			if (options.hydrate) throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			this._fragment.c();
			this._mount(options.target, options.anchor);

			flush(this);
		}

		this._intro = true;
	}

	assign(Dynamic.prototype, protoDev);
	assign(Dynamic.prototype, methods);

	Dynamic.prototype._checkReadOnly = function _checkReadOnly(newState) {
	};

	const app = new Dynamic({
		target: document.getElementById("dynamic"),
		data: {}
	});

	return app;

}());
//# sourceMappingURL=bundle.js.map
